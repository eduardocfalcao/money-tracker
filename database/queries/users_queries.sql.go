// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users_queries.sql

package queries

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, email, passwordHash, salt)
VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	Name         string `db:"name" json:"name"`
	Email        string `db:"email" json:"email"`
	Passwordhash string `db:"passwordhash" json:"passwordhash"`
	Salt         string `db:"salt" json:"salt"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Passwordhash,
		arg.Salt,
	)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, name, email, passwordhash, salt FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.Passwordhash,
		&i.Salt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, name, email, passwordhash, salt FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.Passwordhash,
		&i.Salt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, name, email, passwordhash, salt FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Email,
			&i.Passwordhash,
			&i.Salt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, created_at, name, email, passwordhash, salt FROM users u
where CASE WHEN LENGTH($1::text) != 0 THEN t.name LIKE '%'+@name::text +'%' ELSE TRUE END
`

func (q *Queries) SearchUsers(ctx context.Context, name string) ([]User, error) {
	rows, err := q.db.Query(ctx, searchUsers, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Email,
			&i.Passwordhash,
			&i.Salt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
